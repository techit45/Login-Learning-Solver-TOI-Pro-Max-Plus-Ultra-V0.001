// Set up PDF.js worker
pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';

let selectedFile = null;
let currentPythonCode = '';
let currentCppCode = '';

document.addEventListener('DOMContentLoaded', initializeApp);

function initializeApp() {
    const uploadZone = document.getElementById('uploadZone');
    const fileInput = document.getElementById('fileInput');
    const processBtn = document.getElementById('processBtn');
    const apiKeyLockBtn = document.getElementById('apiKeyLockBtn');
    const sendToAiBtn = document.getElementById('sendToAiBtn');

    uploadZone.addEventListener('click', () => fileInput.click());
    uploadZone.addEventListener('dragover', handleDragOver);
    uploadZone.addEventListener('dragleave', handleDragLeave);
    uploadZone.addEventListener('drop', handleDrop);
    fileInput.addEventListener('change', handleFileSelect);
    
    processBtn.addEventListener('click', performOcr);
    sendToAiBtn.addEventListener('click', getAiSolution);
    apiKeyLockBtn.addEventListener('click', toggleApiLock);
}

function toggleApiLock() {
    const apiKeyInput = document.getElementById('geminiApiKey');
    const lockBtn = document.getElementById('apiKeyLockBtn');

    if (apiKeyInput.readOnly) {
        const password = prompt("‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å:");
        if (password === '0000') {
            apiKeyInput.readOnly = false;
            apiKeyInput.type = 'text';
            lockBtn.textContent = 'üîì';
            alert('‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç API Key ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß');
        } else if (password !== null) {
            alert('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!');
        }
    } else {
        apiKeyInput.readOnly = true;
        apiKeyInput.type = 'password';
        lockBtn.textContent = 'üîí';
    }
}

function handleDragOver(e) {
    e.preventDefault();
    document.getElementById('uploadZone').classList.add('dragover');
}

function handleDragLeave(e) {
    e.preventDefault();
    document.getElementById('uploadZone').classList.remove('dragover');
}

function handleDrop(e) {
    e.preventDefault();
    document.getElementById('uploadZone').classList.remove('dragover');
    const files = e.dataTransfer.files;
    if (files.length > 0) {
        handleFile(files[0]);
    }
}

function handleFileSelect(e) {
    const files = e.target.files;
    if (files.length > 0) {
        handleFile(files[0]);
    }
}

function handleFile(file) {
    const validTypes = ['application/pdf', 'image/png', 'image/jpeg', 'image/jpg'];
    if (!validTypes.includes(file.type)) {
        showError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF, PNG, ‡∏´‡∏£‡∏∑‡∏≠ JPG ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
        return;
    }

    if (file.size > 10 * 1024 * 1024) { // 10 MB limit
        showError('‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10MB');
        return;
    }

    selectedFile = file;
    document.getElementById('fileName').textContent = file.name;
    document.getElementById('fileSize').textContent = formatFileSize(file.size);
    document.getElementById('fileInfo').style.display = 'block';
    document.getElementById('processBtn').disabled = false;
    document.getElementById('sendToAiBtn').disabled = true;
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

async function performOcr() {
    if (!selectedFile) return;

    const geminiKey = document.getElementById('geminiApiKey').value.trim();
    if (!geminiKey) {
        showError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Gemini API Key');
        return;
    }

    const processBtn = document.getElementById('processBtn');
    const sendToAiBtn = document.getElementById('sendToAiBtn');

    try {
        processBtn.disabled = true;
        sendToAiBtn.disabled = true;
        showProgress(0);
        updateStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå...', true);

        showProgress(20);
        const imageData = await fileToBase64(selectedFile);
        
        updateStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥ OCR...', true);
        showProgress(50);
        const ocrResult = await callGeminiVision(imageData, geminiKey);
        
        updateStatus('OCR ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', false);
        showProgress(100);
        displayOCRResult(ocrResult);
        setTimeout(hideProgress, 500);

    } catch (error) {
        console.error('OCR Error:', error);
        showError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏≥ OCR: ' + error.message);
        updateStatus('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', false);
        hideProgress();
    } finally {
        processBtn.disabled = false;
    }
}

async function getAiSolution() {
    const ocrText = document.getElementById('ocrContent').value.trim();
    if (!ocrText) {
         showError('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å OCR ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ AI');
         return;
    }
    
    const geminiKey = document.getElementById('geminiApiKey').value.trim();
    if (!geminiKey) {
        showError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Gemini API Key');
        return;
    }
    
    const sendToAiBtn = document.getElementById('sendToAiBtn');

    try {
        sendToAiBtn.disabled = true;
        updateStatus('AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...', true);
        document.getElementById('solutionContent').innerHTML = '<div class="loading"><div class="spinner"></div>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå...</div>';
        
        const prompt = buildCustomPrompt().replace('{PROBLEM_TEXT}', ocrText);
        const aiSolution = await callGeminiText(prompt, geminiKey);

        updateStatus('‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', false);
        displayAISolution(aiSolution);
        extractAndDisplayCode(aiSolution);

    } catch (error) {
        console.error('AI Error:', error);
        showError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å AI: ' + error.message);
        updateStatus('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', false);
        document.getElementById('solutionContent').innerHTML = `<div class="error">‚ùå ${error.message}</div>`;
    } finally {
        sendToAiBtn.disabled = false;
    }
}


function buildCustomPrompt() {
    const outputLanguage = document.getElementById('outputLanguage').value;
    const codeLanguage = document.getElementById('codeLanguage').value;
    const solutionDetail = document.getElementById('solutionDetail').value;

    let prompt = `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÉ‡∏ô‡∏Ñ‡πà‡∏≤‡∏¢ ‡∏™‡∏≠‡∏ß‡∏ô. ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå (TOI).

‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ:
{PROBLEM_TEXT}

‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î:
`;

    if (outputLanguage === 'thai') {
        prompt += `üó£Ô∏è ‡∏†‡∏≤‡∏©‡∏≤: ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n`;
    } else if (outputLanguage === 'english') {
        prompt += `üó£Ô∏è ‡∏†‡∏≤‡∏©‡∏≤: ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n`;
    } else {
        prompt += `üó£Ô∏è ‡∏†‡∏≤‡∏©‡∏≤: ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î\n`;
    }

    if (codeLanguage === 'both') {
        prompt += `üíª ‡∏†‡∏≤‡∏©‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î C++ ‡πÅ‡∏•‡∏∞ Python\n`;
    } else if (codeLanguage === 'cpp') {
        prompt += `üíª ‡∏†‡∏≤‡∏©‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î C++ ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô\n`;
    } else {
        prompt += `üíª ‡∏†‡∏≤‡∏©‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î Python ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô\n`;
    }

    if (solutionDetail === 'brief') {
        prompt += `üìè ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ‡∏™‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö\n`;
    } else if (solutionDetail === 'beginner') {
        prompt += `üìè ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô\n`;
    } else {
        prompt += `üìè ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡πÅ‡∏•‡∏∞‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å\n`;
    }

    prompt += `
üìã ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö:
1.  **‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏à‡∏ó‡∏¢‡πå:** (Problem Analysis)
2.  **‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°:** (Algorithm Explanation)
3.  **‡πÇ‡∏Ñ‡πâ‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°:** (Code Implementation - ‡πÉ‡∏ä‡πâ \`\`\`cpp ‡∏´‡∏£‡∏∑‡∏≠ \`\`\`python)
4.  **‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î:** (Code Explanation)
5.  **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà:** (Time/Space Complexity)

‡πÇ‡∏õ‡∏£‡∏î‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`;

    return prompt;
}

async function callGeminiVision(imageData, apiKey) {
    const base64Data = imageData.includes(',') ? imageData.split(',')[1] : imageData;
    const mimeType = imageData.includes('data:') ? imageData.split(';')[0].split(':')[1] : 'image/png';
    
    const promptText = "‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡πÇ‡∏î‡∏¢‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡πÑ‡∏î‡πâ";

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            contents: [{
                parts: [
                    { text: promptText },
                    { inline_data: { mime_type: mimeType, data: base64Data } }
                ]
            }]
        })
    });

    if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`API Error: ${response.status} - ${errorData.error?.message || response.statusText}`);
    }

    const result = await response.json();
    return result.candidates[0].content.parts[0].text;
}

async function callGeminiText(prompt, apiKey) {
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            contents: [{ parts: [{ text: prompt }] }]
        })
    });

    if (!response.ok) {
         const errorData = await response.json();
        throw new Error(`API Error: ${response.status} - ${errorData.error?.message || response.statusText}`);
    }

    const result = await response.json();
    return result.candidates[0].content.parts[0].text;
}

function fileToBase64(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = reject;
        reader.readAsDataURL(file);
    });
}

function displayOCRResult(text) {
    const ocrTextArea = document.getElementById('ocrContent');
    ocrTextArea.value = text;
    document.getElementById('sendToAiBtn').disabled = false;
}

function displayAISolution(solution) {
    // Replace markdown bold/italic and newlines with HTML tags
    const formatted = solution
        .replace(/\*\*\*(.*?)\*\*\*/g, '<strong><em>$1</em></strong>') // Bold Italic
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')       // Bold
        .replace(/\*(.*?)\*/g, '<em>$1</em>')             // Italic
        .replace(/`([^`]+)`/g, '<code>$1</code>')         // Inline code
        .replace(/\n/g, '<br>');
    
    // Remove code blocks from the main solution display area
    const withoutCode = formatted.replace(/<br>```[\s\S]*?```<br>/g, '<br><div style="background:#eef2ff; padding:8px; border-radius:4px; margin:10px 0; color:#4338ca;">[‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á]</div><br>');
    
    document.getElementById('solutionContent').innerHTML = `<div class="solution-text">${withoutCode}</div>`;
}


function extractAndDisplayCode(solution) {
    // Extract Python code
    const pythonMatch = solution.match(/```python\n([\s\S]*?)```/);
    const pythonCodeEl = document.getElementById('pythonCode');
    if (pythonMatch && pythonMatch[1].trim()) {
        currentPythonCode = pythonMatch[1].trim();
        pythonCodeEl.textContent = currentPythonCode;
    } else {
         currentPythonCode = '';
         pythonCodeEl.innerHTML = '<div style="color: #94a3b8; text-align: center; padding: 20px;">‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î Python ‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</div>';
    }

    // Extract C++ code
    const cppMatch = solution.match(/```cpp\n([\s\S]*?)```/) || solution.match(/```c\+\+\n([\s\S]*?)```/);
    const cppCodeEl = document.getElementById('cppCode');
    if (cppMatch && cppMatch[1].trim()) {
        currentCppCode = cppMatch[1].trim();
        cppCodeEl.textContent = currentCppCode;
    } else {
        currentCppCode = '';
        cppCodeEl.innerHTML = '<div style="color: #94a3b8; text-align: center; padding: 20px;">‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î C++ ‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</div>';
    }
}


function copyCode(elementId, btn) {
    const element = document.getElementById(elementId);
    const text = element.textContent;

    if (!text || text.includes('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î')) {
        alert("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å");
        return;
    }
    
    navigator.clipboard.writeText(text).then(() => {
        const originalText = btn.innerHTML;
        btn.innerHTML = '‚úÖ ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß!';
        btn.style.background = '#10b981';
        
        setTimeout(() => {
            btn.innerHTML = originalText;
            btn.style.background = ''; // Revert to original class style
        }, 2000);
    });
}

async function refreshCode(language, btn) {
    const originalText = btn.innerHTML;
    btn.innerHTML = 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...';
    btn.disabled = true;

    try {
        const geminiKey = document.getElementById('geminiApiKey').value.trim();
        if (!geminiKey) {
            showError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Gemini API Key');
            return;
        }

        const sourceCode = language === 'python' ? currentCppCode : currentPythonCode;
        const sourceLang = language === 'python' ? 'C++' : 'Python';
        const targetLang = language === 'python' ? 'Python' : 'C++';

        if (!sourceCode) {
            showError(`‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡πâ‡∏î ${sourceLang} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á`);
            return;
        }

        const prompt = `‡πÅ‡∏õ‡∏•‡∏á‡πÇ‡∏Ñ‡πâ‡∏î ${sourceLang} ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤ ${targetLang} ‡πÇ‡∏î‡∏¢‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:

\`\`\`${sourceLang.toLowerCase()}
${sourceCode}
\`\`\`

‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î ${targetLang} ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏î‡πÜ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°`;

        const newCodeText = await callGeminiText(prompt, geminiKey);
        
        let newCode = newCodeText;
        const codeMatch = newCode.match(/```[\w\W]*?\n([\s\S]*?)```/);
        if (codeMatch) {
            newCode = codeMatch[1].trim();
        }

        if (language === 'python') {
            currentPythonCode = newCode;
            document.getElementById('pythonCode').textContent = newCode;
        } else {
            currentCppCode = newCode;
            document.getElementById('cppCode').textContent = newCode;
        }

        btn.innerHTML = '‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!';
        btn.style.background = '#10b981';

    } catch (error) {
        console.error('Refresh code error:', error);
        btn.innerHTML = '‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î';
        btn.style.background = '#ef4444';
    } finally {
        setTimeout(() => {
            btn.innerHTML = originalText;
            btn.style.background = '';
            btn.disabled = false;
        }, 2000);
    }
}

function showCppInfo() {
    alert(`üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡∏£‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î C++:

1. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î C++
2. ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° IDE ‡πÄ‡∏ä‡πà‡∏ô:
   ‚Ä¢ Dev-C++
   ‚Ä¢ Code::Blocks
   ‚Ä¢ Visual Studio Code (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏° C++)
   ‚Ä¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡πá‡∏ö‡∏Ñ‡∏≠‡∏°‡πÑ‡∏û‡πÄ‡∏•‡∏≠‡∏£‡πå‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
3. ‡∏ß‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏≠‡∏°‡πÑ‡∏û‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô
4. ‡πÉ‡∏™‡πà Input ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Å‡∏≥‡∏´‡∏ô‡∏î

üîó ‡πÄ‡∏ß‡πá‡∏ö‡∏Ñ‡∏≠‡∏°‡πÑ‡∏û‡πÄ‡∏•‡∏≠‡∏£‡πå C++ ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:
‚Ä¢ https://onlinegdb.com/online_c++_compiler
‚Ä¢ https://www.programiz.com/cpp-programming/online-compiler/`);
}

function updateStatus(message, isProcessing) {
    const statusText = document.getElementById('statusText');
    const statusDot = document.querySelector('.status-dot');
    statusText.textContent = message;
    if (isProcessing) {
        statusDot.style.background = '#f59e0b'; // Yellow for processing
    } else {
        statusDot.style.background = '#10b981'; // Green for ready
    }
}

function showProgress(percentage) {
    const progressBar = document.getElementById('progressBar');
    const progressFill = document.getElementById('progressFill');
    progressBar.style.display = 'block';
    progressFill.style.width = percentage + '%';
}

function hideProgress() {
    document.getElementById('progressBar').style.display = 'none';
}

function showError(message) {
    alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + message);
}
